using Schrabber.Interfaces;
using Schrabber.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace Schrabber.Windows
{
	/// <summary>
	/// Window for the user to separate an IInputMedia into IParts.
	/// </summary>
	public partial class SplitWindow : Window
	{

		/// <summary>
		/// IEnumerable of IParts the user separated the IInputmedia into.
		/// </summary>
		public IEnumerable<IPart> Parts
		{
			get => this._gridItems.Where(p => !String.IsNullOrWhiteSpace(p.Title)).OrderBy(p => p.Start);
		}

		private readonly IInputMedia _input;
		private readonly ObservableCollection<IPart> _gridItems;

		public SplitWindow(IInputMedia input)
		{
			this._gridItems = new ObservableCollection<IPart>(input.Parts);

			this.InitializeComponent();

			this._input = input;

			#region DataGrid
			this.Parts_DataGrid.ItemsSource = this._gridItems;
			this.Parts_DataGrid.AutoGeneratedColumns += (object sender, EventArgs e) =>
			{
				// Start
				this.Parts_DataGrid.Columns[0].Width = 70;
				this.Parts_DataGrid.Columns[0].SortDirection = ListSortDirection.Ascending;
				// End;
				this.Parts_DataGrid.Columns[1].Visibility = Visibility.Hidden;
				// Title
				this.Parts_DataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
				// Author
				this.Parts_DataGrid.Columns[3].Width = new DataGridLength(1, DataGridLengthUnitType.Star);

				ICollectionView collectionView = CollectionViewSource.GetDefaultView(this.Parts_DataGrid.ItemsSource);
				collectionView.SortDescriptions.Clear();
				collectionView.SortDescriptions.Add(new SortDescription((String)this.Parts_DataGrid.Columns[0].Header, ListSortDirection.Ascending));
			};
			#endregion Datagrid
		}

		private void ConfirmButton_Click(object sender, RoutedEventArgs e)
		{
			IPart prev = null;
			foreach (IPart row in this._gridItems)
			{
				if (prev != null)
				{
					if (prev.Start == row.Start)
					{
						MessageBox.Show($"Identical timestamp found for: \n \"{prev.Title}\"\n\"{row.Title}\"");

						e.Handled = true;
						return;
					}
					prev.Stop = row.Start;
				}

				prev = row;
			}

			this.DialogResult = true;
			this.Close();
		}

		private void NewPartButton_Click(object sender, RoutedEventArgs e)
		{
			this._gridItems.Add(new Part()
			{
				Start = TimeSpan.FromSeconds(0),
			});
		}

		private void ImportPartsButton_Click(object sender, RoutedEventArgs e)
		{
			// TODO: :that:
			MessageBox.Show("Not implemented yet.");
		}
	}
}
