using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Linq.Expressions;
using System.Collections.ObjectModel;
using System.ComponentModel;
using YoutubeExplode.Models;

namespace Schrabber.Windows
{
	/// <summary>
	/// Interaction logic for Parts.xaml
	/// </summary>
	public partial class SplitVideoWindow : Window
	{

		private static readonly Regex _timeRegex = new Regex(@"(?:(\d{1,2}:\d{1,2}:\d{1,2})|(\d{1,2}:\d{1,2}))(.*)");

		public List<Part> Parts { get => _gridItems.Count == 0 ? null : _gridItems.OrderBy(p => p.Timestamp).ToList(); }

		private ObservableCollection<Part> _gridItems = new ObservableCollection<Part>();

		public SplitVideoWindow(string input)
		{
			InitializeComponent();

			Parts_DataGrid.ItemsSource = _gridItems;
			ICollectionView collectionView = CollectionViewSource.GetDefaultView(Parts_DataGrid.ItemsSource);
			collectionView.SortDescriptions.Clear();
			collectionView.SortDescriptions.Add(new SortDescription("Timestamp", ListSortDirection.Ascending));
			Parts_DataGrid.AutoGeneratedColumns += (object sender, EventArgs e) =>
			{
				// Timestamp
				Parts_DataGrid.Columns[0].Width = 70;
				Parts_DataGrid.Columns[0].SortDirection = ListSortDirection.Ascending;
				// Title
				Parts_DataGrid.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
				// Author
				Parts_DataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
			};

			if (!String.IsNullOrEmpty(input))
			{
				string[] lines = input.Split('\n');

				TimeSpan last = TimeSpan.FromSeconds(0);
				foreach (string line in lines)
				{
					MatchCollection matches = _timeRegex.Matches(line);
					if (matches.Count == 0)
					{
						_gridItems.Add(new Part { Timestamp = last, Title = line });

						last += TimeSpan.FromSeconds(1);
					}
					else
					{
						GroupCollection group = matches[0].Groups;

						last = String.IsNullOrWhiteSpace(group[1].Value)
							? TimeSpan.ParseExact(group[2].Value, @"mm\:ss", System.Globalization.CultureInfo.InvariantCulture)
							: TimeSpan.ParseExact(group[1].Value, @"HH\:mm\:ss", System.Globalization.CultureInfo.InvariantCulture);

						string rest = group[3].Value;

						_gridItems.Add(new Part { Timestamp = last, Title = rest });
					}
				}
			}
		}

		private void ConfirmButton_Click(object sender, RoutedEventArgs e)
		{
			Part prev = null;
			foreach (Part row in _gridItems)
			{
				if (prev == null)
				{
					prev = row;

					continue;
				}

				if (prev.Timestamp == row.Timestamp)
				{
					MessageBox.Show($"Identical timestamp found for: \n \"{prev.Title}\"\n\"{row.Title}\"");

					e.Handled = true;
					return;
				}
			}

			this.DialogResult = true;
			this.Close();
		}
	}
}
